{"meta":{"title":"Ludwig's blog","subtitle":null,"description":null,"author":"HerrLudwig","url":"https://herrludwig.github.io","root":"/"},"pages":[{"title":"categories","date":"2019-08-06T06:57:02.000Z","updated":"2019-08-06T06:58:51.157Z","comments":true,"path":"categories/index.html","permalink":"https://herrludwig.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-08-06T06:59:16.000Z","updated":"2019-08-06T07:05:11.406Z","comments":true,"path":"tags/index.html","permalink":"https://herrludwig.github.io/tags/index.html","excerpt":"","text":""},{"title":"whoami","date":"2019-08-06T07:04:22.000Z","updated":"2019-08-06T07:31:39.753Z","comments":true,"path":"whoami/index.html","permalink":"https://herrludwig.github.io/whoami/index.html","excerpt":"","text":"博主简介华中科技大学 / 软件工程 / 硕士研究生 吉他手 / 胶佬 / 摄影爱好者 感谢您浏览我的博客，我是Ludwg，目前正在努力学习前端技术。如果我的博客能有一点点帮到您，那真是太好了！"}],"posts":[{"title":"Hello World","slug":"hello-world","date":"2019-08-05T08:09:19.354Z","updated":"2019-08-05T08:09:19.354Z","comments":true,"path":"2019/08/05/hello-world/","link":"","permalink":"https://herrludwig.github.io/2019/08/05/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"mongoose介绍以及实现增删改查","slug":"test","date":"2018-09-05T08:14:16.000Z","updated":"2019-08-07T11:36:48.532Z","comments":true,"path":"2018/09/05/test/","link":"","permalink":"https://herrludwig.github.io/2018/09/05/test/","excerpt":"","text":"一、mongoose介绍Mongoose 是在 Node.js 异步环境下对 MongoDB 进行便捷操作的对象模型工具。Mongoose 有两个特点： 通过关系型数据库的思想来设计非关系型数据库 简化对 MongoDB 的操作 二、安装及使用1. 安装1npm i mongoose --save 2. 引入并连接12const mongoose = require(&apos;mongoose&apos;);mongoose.connect(&apos;mongodb://localhost/test&apos;); 3. 定义SchemaSchema为数据库对象的集合。Schema 是 Mongoose 里用到的一种数据模式，可以理解为“表”结构的定义；每个 Schema 会映射到 Mongodb 中的一个 collection。 12345var UserSchema=mongoose.Schema(&#123; name: String, age:Number, status:&apos;number&apos;&#125;) 4. 创建数据模型model 是由 Schema 生成的模型，可以对数据库进行操作，而Schema不能对数据库进行操作。mongoose.mode 里面可以传入两个或三个参数。 1mongoose.model（参数1：&apos;模型名称&apos;（首字母大写），参数2：XXSchema，参数3：集合名称） 如果传入2个参数的话，这个模型会和模型名称相同的复数的集合建立连接。如通过下面方法创建模型，那么这个模型将会操作 users 这个集合。 1var User=mongoose.model(&apos;User&apos;, UserSchema) 如果传入3个参数的话，模型默认操作第三个参数定义的集合名称。 三、增删改查123456var u=new User(&#123; //实例化model，增加数据 name:&apos;Tom&apos;, age:20, status:true &#125;)u.save(); 1234567User.deleteOne(&#123; &apos;_id&apos;: &apos;5b72ada84e284f0acc8d318a&apos; &#125;, function (err) &#123; if (err) &#123; console.log(err); return; &#125; console.log(&apos;删除成功&apos;);&#125;); 1234567User.updateOne(&#123; &apos;_id&apos;: &apos;5b72ada84e284f0acc8d318a&apos; &#125;, &#123; name: &apos;Ben&apos; &#125;, function(err) &#123; if(err)&#123; console.log(err); return; &#125; console.log(&apos;修改成功&apos;)&#125;) 1234567User.find(&#123;&#125;,function(err,docs)&#123; //未限定条件即为全部查找 if(err)&#123; console.log(err); return; &#125; console.log(docs);&#125;)","categories":[{"name":"MongoDB","slug":"MongoDB","permalink":"https://herrludwig.github.io/categories/MongoDB/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"https://herrludwig.github.io/tags/数据库/"}]}]}